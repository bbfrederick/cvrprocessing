#!/usr/bin/env python
from __future__ import print_function

import sys
import os
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import getopt
import bioread
import pandas as pd
import glob
import time
from scipy import signal
import json
import bisect
import gzip

def marker_formatter(acq_filename, graph_sample_msec):
    """ Return a function that turns a marker into a dict. """
    def f(marker):
        return {
            'filename': acq_filename,
            'time (s)': (marker.sample_index * graph_sample_msec) / 1000,
            'label': marker.text,
            'channel': marker.channel_name,
            'type_code': marker.type_code,
            'type': marker.type
        }
    return f

def procmarker(marker, graph_sample_msec):
    thetime = (marker.sample_index * graph_sample_msec) / 1000
    markertype = ''
    if marker.type_code == 'usr1':
        return('start_scan', thetime)
    elif marker.type_code == 'usr2':
        return('end_scan', thetime)
    elif marker.type_code == 'usr3':
        return('start_gas', thetime)
    elif marker.type_code == 'usr4':
        return('end_gas', thetime)
    else:
        return('unknown', thetime)
        

def genpulses(waveform, sampletime, numpulses, pulsespacing, pulseduration, starttime):
    for pulse in range(0, numpulses):
        pulsestart = starttime + pulse * pulsespacing
        pulsestartpt = np.max([int(np.round(pulsestart/sampletime)), 0])
        pulseend = pulsestart + pulseduration
        pulseendpt = np.min([int(np.round(pulseend/sampletime) + 1), len(waveform) - 1])
        if (pulsestartpt < len(waveform)) and (pulseendpt >= 0):
            waveform[int(np.round(pulsestart/sampletime)):int(np.round(pulseend/sampletime) + 1)] = 4.0
        

def writewaves(name, type, starttime, endtime, samplerate, outputpath, timeaxis, names, data, padtime=30.0):
    startpt = int(np.round((starttime - padtime)/ samplerate))
    endpt = int(np.round((endtime + padtime) / samplerate))
    if startpt < 0:
        startpt = 0
    if endpt > len(timeaxis) - 1:
        endpt = len(timeaxis) - 1
    with gzip.open(os.path.join(outputpath, subjnum + '_' + name + '_recording-' + type + '_physio.tsv.gz'), 'w') as fp:
        for i in range(startpt, endpt):
            #theline = str(timeaxis[i])
            theline = []
            for thevec in range(len(data)):
                theline.append(str(data[thevec][i]))
            theformattedline = '\t'.join(theline) + '\n'
            #fp.writelines(str(timeaxis[i] - starttime) + '\t' + str(hbo[i]) + '\t' + str(hbr[i]) + '\t' + str(thb[i]) + '\n')
            fp.write(theformattedline.encode('utf-8'))

    with open(os.path.join(outputpath, subjnum + '_' + name + '_recording-nirs_physio.json'), 'w') as fp:
        # write json
        json_dict = {}
        json_dict["SamplingFrequency"] = 1.0 / sampletime
        json_dict["StartTime"] = -30.0
        json_dict["Columns"] = names
        json.dump(json_dict, fp, indent=4, sort_keys=False)



hammingwindows = {}
def hamming(length):
#   return 0.54 - 0.46 * np.cos((np.arange(0.0, float(length), 1.0) / float(length)) * 2.0 * np.pi)
    try:
        return hammingwindows[str(length)]
    except:
        hammingwindows[str(length)] = 0.54 - 0.46 * np.cos((np.arange(0.0, float(length), 1.0) / float(length)) * 2.0 * np.pi)
        print('initialized hamming window for length', length)
        return hammingwindows[str(length)]


def finddelay_com(input1, input2, sampletime, debug=False):
    com1 = sampletime * sp.ndimage.measurements.center_of_mass(input1)[0]
    com2 = sampletime * sp.ndimage.measurements.center_of_mass(input2)[0]
    if debug:
        print('FINDDELAY_COM - com1, com2, diff:', com1, com2, com2 - com1)
    return com2 - com1


def finddelay_corr(input1, input2, sampletime):
    #thewindow = hamming(len(input1))
    thexcorr = signal.fftconvolve(input1, input2[::-1], mode='full')
    xcorrlen = len(thexcorr)
    xcorr_x = np.r_[0.0:xcorrlen] * sampletime - (xcorrlen * sampletime) / 2.0 + sampletime / 2.0
    '''
    fig = plt.figure()
    plt.plot(xcorr_x, thexcorr)
    plt.show()
    '''
    return xcorr_x[np.argmax(thexcorr)]


def usage():
    print("")
    print("readnirs - read a fingertip NIRS file and convert to synced tsv files")
    print("")
    print("    usage:  readnirs inputfile outputfile [--noshow] [--imtimes] [--initoffset=OFFSET] [--noopt] [--trim]")
    print("")

# initialize variables
display = True
gasdelay = 0.0
imtimes = False
optimize = True
trim = False
initoffset = 0.0
resttrs = 480
breathtrs = 480
blocktrs = 600
pcasl1time = 197
pcasl2time = 133
tr = 0.75
triggerexists = True
respexists = True
debug = False

try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], "X", ["noshow", "imtimes", "debug", "initoffset=", "noopt", "trim"])
except getopt.GetoptError as err:
    # print help information and exit:
    print(str(err))  # will print something like "option -x not recognized"
    usage()
    sys.exit(2)

if len(args) != 2:
    print('readbiopac requires the names of an input and an output file')
    usage()
    exit()

for o, a in opts:
    if o == '--noshow':
        display = False
    elif o == "--initoffset":
        imtimes = True
        initoffset = float(a)
        print('will start with an offset of', initoffset, 'seconds')
    elif o == "--trim":
        imtimes = True
        trim = True
        print('will trim output display to scan time')
    elif o == "--noopt":
        imtimes = True
        optimize = False
        print('will not optimize offset value')
    elif o == "--imtimes":
        imtimes = True
        print('will look for image time files')
    elif o == "--debug":
        debug = True
        print('will turn on debugging output')
    else:
        assert False, "unhandled option"

inputfile = os.path.abspath(args[0])
physiopath, inputname = os.path.split(inputfile)
subjpath, dummy = os.path.split(physiopath)
rootpath, subjnum = os.path.split(subjpath)
funcpath = os.path.join(subjpath, 'func')

data = pd.read_csv(inputfile, header=0, engine='python', sep=r"\s*")
if debug:
    print(thedata)
rawtimeaxis = data['Time'].values - data['Time'].values[0]
triggerwaveform = 5.0 * data['external'].values
sampletime = (rawtimeaxis[-1] - rawtimeaxis[0]) / (len(rawtimeaxis) - 1.0)
savechannels = [
    'fingertip_HbOraw',
    'fingertip_HbOlfo',
    'fingertip_HbOcard',
    'fingertip_HbRraw',
    'fingertip_HbRlfo',
    'fingertip_HbRcard',
    'fingertip_rri',
    'fingertip_instbpm',
    'fingertip_ratiospo2',
    'fingertip_instspo2',
    'fingertip_fftbpm',
    'fingertip_avgbpm',
    'external']

possiblechannels = [
    'fingertip_IR',
    'fingertip_VS',
    'fingertip_HbOraw',
    'fingertip_HbOlfo',
    'fingertip_HbOcard',
    'fingertip_HbRraw',
    'fingertip_HbRlfo',
    'fingertip_HbRcard',
    'fingertip_tHbraw',
    'fingertip_tHblfo',
    'fingertip_tHbcard',
    'fingertip_tHbresp',
    'fingertip_HbOresp',
    'fingertip_HbRresp',
    'fingertip_tHbcardrms',
    'fingertip_HbOcardrms',
    'fingertip_HbRcardrms',
    'fingertip_tHblowpass',
    'fingertip_peaks',
    'fingertip_rri',
    'fingertip_instbpm',
    'fingertip_peakheight',
    'fingertip_ratiospo2',
    'fingertip_instspo2',
    'fingertip_confidence',
    'fingertip_fftbpm',
    'fingertip_avgbpm',
    'button',
    'calibrate',
    'toggle',
    'sync',
    'external']

savechannelnames = []
for channel in savechannels:
    savechannelnames.append(channel.replace('fingertip_', ''))

print(savechannels)

if imtimes:
    # search for all the imtime files
    print('searching for functional files in ', funcpath)
    searchstring = os.path.join(funcpath, '*_rec-mag_bold.json')
    thefiles = glob.glob(searchstring)
    searchstring = os.path.join(funcpath, '*_asl.json')
    thefiles += glob.glob(searchstring)
    print('files found:')
    print(thefiles)
    events = {}
    firsttime = 1000000000000.0

    for filename in thefiles:
        if filename.find('phase') == -1:
            filepath, filebase = os.path.split(os.path.splitext(filename)[0])
            print('filebase:', filebase)
            eventname = '_'.join(filebase.split('_')[1:])
            events[eventname] = {}
            events[eventname]['file'] = filename
            if filename.find('asl') != -1:
                # pcasl file
                if filename.find('pcasl1') != '-1':
                    events[eventname]['type'] = 'pcasl1'
                else:
                    events[eventname]['type'] = 'pcasl2'
            elif filename.find('block') != -1:
                # block file
                events[eventname]['type'] = 'block'
            elif filename.find('rest') != -1:
                # resting file
                events[eventname]['type'] = 'resting'
            elif filename.find('breath') != -1:
                # breath file
                events[eventname]['type'] = 'breath'
            else:
                pass
            with open(events[eventname]['file'], 'r') as fp:
                thejsondata = json.load(fp)
                events[eventname]['starttimestr'] = thejsondata['AcquisitionDateTime']
                #events[eventname]['starttimestr'] = fp.readlines()[0]
            timestruct = time.strptime(events[eventname]['starttimestr'][0:16], "%Y-%m-%dT%H:%M")
            integerseconds = time.mktime(timestruct)
            #integerseconds = time.mktime(time.strptime(events[eventname]['starttimestr'][0:16], "%Y-%m-%dT%H:%M"))
            events[eventname]['starttimesec'] = 1.0 * integerseconds + float(events[eventname]['starttimestr'][17:])
            if events[eventname]['starttimesec'] < firsttime:
                firsttime = events[eventname]['starttimesec']
            #print(events[eventname])
    print('first scan starts at', firsttime)
    print()

    # construct the probe regressor
    probetc = 0.0 * triggerwaveform
    for key, val in enumerate(events):
        events[val]['relstarttime'] = events[val]['starttimesec'] - firsttime
        if events[val]['type'] == 'block':
            print('adding block train at', events[val]['relstarttime'])
            genpulses(probetc, sampletime, blocktrs, tr, 0.050, events[val]['relstarttime'] + initoffset)
        if events[val]['type'] == 'breath':
            print('adding breath train at', events[val]['relstarttime'])
            genpulses(probetc, sampletime, breathtrs, tr, 0.050, events[val]['relstarttime'] + initoffset)
        if events[val]['type'] == 'resting':
            print('adding resting train at', events[val]['relstarttime'])
            genpulses(probetc, sampletime, resttrs, tr, 0.050, events[val]['relstarttime'] + initoffset)
        print(val, events[val]['type'], events[val]['relstarttime'])

    if optimize:
        thedelay = finddelay_corr(triggerwaveform, probetc, sampletime) - initoffset
    else:
        thedelay = initoffset
    print('delay value to first scan is', thedelay)
    print()

    probetc = 0.0 * triggerwaveform
    scanningstart = 1000000000.0
    scanningend = -10000000.0
    for key, val in enumerate(events):
        events[val]['absstarttime'] = events[val]['relstarttime'] + thedelay
        if events[val]['type'] == 'pcasl1':
            genpulses(probetc, sampletime, 1, 0.0, pcasl1time, events[val]['absstarttime'])
            events[val]['absendtime'] = events[val]['absstarttime'] + pcasl1time
        if events[val]['type'] == 'pcasl2':
            genpulses(probetc, sampletime, 1, 0.0, pcasl2time, events[val]['absstarttime'])
            events[val]['absendtime'] = events[val]['absstarttime'] + pcasl2time
        if events[val]['type'] == 'block':
            genpulses(probetc, sampletime, blocktrs, tr, 0.050, events[val]['absstarttime'])
            events[val]['absendtime'] = events[val]['absstarttime'] + blocktrs * tr
        if events[val]['type'] == 'breath':
            events[val]['absendtime'] = events[val]['absstarttime'] + breathtrs * tr
            genpulses(probetc, sampletime, breathtrs, tr, 0.050, events[val]['absstarttime'])
        if events[val]['type'] == 'resting':
            genpulses(probetc, sampletime, resttrs, tr, 0.050, events[val]['absstarttime'])
            events[val]['absendtime'] = events[val]['absstarttime'] + resttrs * tr
        if events[val]['absstarttime'] < scanningstart:
            scanningstart = events[val]['absstarttime']
        if events[val]['absendtime'] > scanningend:
            scanningend = events[val]['absendtime']

    savevalues = []
    for channel in savechannels:
        savevalues.append(data[channel].values)

    for key, val in enumerate(events):
        trimmedroot = val.replace('_asl', '').replace('_bold', '')
        writewaves(trimmedroot, 'gas', events[val]['absstarttime'], events[val]['absendtime'], sampletime,
            funcpath,
            rawtimeaxis,
            savechannelnames,
            savevalues)


cols = []
d = {}
d['Time'] = rawtimeaxis
cols.append('Time')

for thechan in savechannels:
    d[thechan] = data[thechan].values
    cols.append(thechan)
d[u'Trigger'] = triggerwaveform
cols.append(u'Trigger')
print(cols)

# write csv file
df = pd.DataFrame(data=d)
df = df[cols]
if args[1][-3:] == 'csv':
    df.to_csv(args[1], sep=',', index=False)
else:
    df.to_csv(args[1], sep='\t', index=False)


numplots = 4

if display:
        thestdwidth = 0.33
        dispmin = rawtimeaxis[0]
        dispmax = rawtimeaxis[-1]
        dispoffset = 0.0
        padvalue = 30.0
        if trim:
            dispoffset = -scanningstart
            dispmin = -padvalue
            dispmax = scanningend + padvalue
        fig = plt.figure()

        numvecs = 4
        axlist = fig.subplots(numvecs, sharex=True, sharey=False)[:]

        whichax = 0
        axlist[whichax].set_title(savechannelnames[0])
        axlist[whichax].set_xlim([dispmin, dispmax])
        axlist[whichax].plot(rawtimeaxis + dispoffset, data[savechannels[0]].values, 'b', linewidth=thestdwidth)
        whichax += 1

        axlist[whichax].set_title(savechannelnames[1])
        axlist[whichax].set_xlim([dispmin, dispmax])
        axlist[whichax].plot(rawtimeaxis + dispoffset, data[savechannels[1]].values, 'g', linewidth=thestdwidth)
        whichax += 1

        axlist[whichax].set_title(savechannelnames[2])
        axlist[whichax].set_xlim([dispmin, dispmax])
        axlist[whichax].plot(rawtimeaxis + dispoffset, data[savechannels[2]].values, 'k', linewidth=thestdwidth)
        whichax += 1

        axlist[whichax].set_title('Scanner trigger')
        axlist[whichax].set_xlim([dispmin, dispmax])
        axlist[whichax].set_ylim([0, 5.2])
        if imtimes:
            axlist[whichax].plot(rawtimeaxis + dispoffset, triggerwaveform, 'k', rawtimeaxis + dispoffset, probetc, 'r', linewidth=thestdwidth)
        else:
            axlist[whichax].plot(rawtimeaxis + dispoffset, triggerwaveform, 'k', linewidth=thestdwidth)
        plt.subplots_adjust(hspace=0.5)
        plt.savefig(os.path.join(physiopath, subjnum + '_nirs_plot.pdf'), bbox_inches='tight')
        plt.show()
