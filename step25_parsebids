#!/usr/bin/env python
from __future__ import print_function, division

import csv
import glob
import numpy as np
import sys
import os
from os.path import join as pjoin
import subprocess
import pandas as pd
import json

def usage():
    print("")
    print("step25_parsebids - extract info from bids file")
    print("")
    print("    usage:  step25_parsebids subjectdirectory")
    print("")

            
def parsebids(subjectdir, niftisubdir, niftiname, getslicetimes=False):
    bidsfile = pjoin(subjectdir, niftisubdir, niftiname + '.json')
    if os.path.isfile(bidsfile):
        with open(bidsfile) as fp:
            bidsdata = json.load(fp)
            imtimefilename = pjoin(subjectdir, niftisubdir, niftiname + '_imtime.txt')
            with open(imtimefilename, 'w') as timefile:
                timefile.write(bidsdata['AcquisitionDateTime'])
            if getslicetimes:
                slicetimefilename = pjoin(subjectdir, niftisubdir, niftiname + '_slicetimes.txt')
                with open(slicetimefilename, 'w') as slicetimefile:
                    for thetime in bidsdata['SliceTiming']:
                        slicetimefile.write(str(thetime) + '\n')
    else:
        print(bidsfile, 'does not exist - skipping')
    

def convertdicoms(subjectdir, dicomsubdir, niftisubdir, niftiname):
    sourcedir = pjoin(subjectdir, 'dicomdir', dicomsubdir)
    if os.path.isdir(sourcedir):
        destdir = pjoin(subjectdir, niftisubdir)
        try:
            os.makedirs(destdir)
        except OSError:
            pass
        try:
            os.remove(niftiname + '.nii.gz')
        except:
            pass
        try:
            os.remove(niftiname + '.json')
        except:
            pass
        print(sourcedir, destdir, niftiname)
        dcm2niicmd = ['dcm2niix', '-b', '-z', 'i', '-f', niftiname , '-o', destdir, sourcedir]
        subprocess.call(dcm2niicmd)
    else:
        print(sourcedir, 'does not exist - skipping')


def main():
    args = sys.argv[1:]
    if len(args) != 1:
        print('readbiopac requires the names of an input and an output file')
        usage()
        exit()

    # determine which files are there to be analyzed
    subjectdir = args[0]
    thepath, thesubject = os.path.split(subjectdir)
    print(thepath, thesubject)

    anatscans = ['T1w',
                'acq-PC30_angio',
                'acq-tof_angio']
    for thescan in anatscans:
        parsebids(subjectdir, 'anat', thesubject + '_' + thescan[1])

    aslscans = ['task-carbogen_acq-pcasl1_asl',
                'task-carbogen_acq-pcasl2_asl',
                'task-air_acq-pcasl1_asl',
                'task-air_acq-pcasl2_asl',
                'task-O2_acq-pcasl1_asl',
                'task-O2_acq-pcasl2_asl']
    for thescan in aslscans:
        parsebids(subjectdir, 'func', thesubject + '_' + thescan[1])

    fmriscans = ['task-rest_acq-air',
                'task-rest_acq-carbogen',
                'task-rest_acq-O2',
                'task-breathhold_acq-air',
                'task-block_acq-carbogen',
                'task-block_acq-O2']
    for thescan in fmriscans:
        parsebids(subjectdir, 'func', thesubject + '_' + thescan + '_rec-mag_bold', getslicetimes=True)
        parsebids(subjectdir, 'func', thesubject + '_' + thescan + '_rec-phase_bold', getslicetimes=True)
    
if __name__ == "__main__":
    main()
